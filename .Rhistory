View(casualties)
fatal_events <- head(casualties[order(casualties$fatalities, decreasing = T), ], 10)
injury_events <- head(casualties[order(casualties$injuries, decreasing = T), ], 10)
fatal_events[, c("EVTYPE", "fatalities")]
injury_events[, c("EVTYPE", "injuries")]
library(markdown)
library(knitr)
setwd("D:/Google Drive/Coursera/Assignment 5.1/R/coursera-repdata/project2")
knitr::opts_chunk$set(echo=FALSE, fig.path='D:/Google Drive/Coursera/Assignment 5.1/R/coursera-repdata/project2/figure/', cache=TRUE)
knitr::knit2html("storm.analysis.Rmd", options=c("use_xhtml","smartypants","mathjax","highlight_code", "base64_images"))
library(markdown)
library(knitr)
setwd("D:/Google Drive/Coursera/Assignment 5.1/R/coursera-repdata/project2")
knitr::opts_chunk$set(echo=FALSE, fig.path='D:/Google Drive/Coursera/Assignment 5.1/R/coursera-repdata/project2/figure/', cache=TRUE)
knitr::knit2html("storm.analysis.Rmd", options=c("use_xhtml","smartypants","mathjax","highlight_code", "base64_images"))
library(markdown)
library(knitr)
setwd("D:/Google Drive/Coursera/Assignment 5.1/R/coursera-repdata/project2")
knitr::opts_chunk$set(echo=FALSE, fig.path='D:/Google Drive/Coursera/Assignment 5.1/R/coursera-repdata/project2/figure/', cache=TRUE)
knitr::knit2html("storm.analysis.Rmd", options=c("use_xhtml","smartypants","mathjax","highlight_code", "base64_images"))
setwd("D:/Google Drive/Coursera/Assignment 5.1/R/coursera-repdata/project2")
library(markdown)
library(knitr)
setwd("D:/Google Drive/Coursera/Assignment 5.1/R/coursera-repdata/project2")
knitr::opts_chunk$set(echo=FALSE, fig.path='D:/Google Drive/Coursera/Assignment 5.1/R/coursera-repdata/project2/figure/', cache=TRUE)
knitr::knit2html("storm.analysis.Rmd", options=c("use_xhtml","smartypants","mathjax","highlight_code", "base64_images"))
library(markdown)
library(knitr)
setwd("D:/Google Drive/Coursera/Assignment 5.1/R/coursera-repdata/project2")
knitr::opts_chunk$set(echo=FALSE, fig.path='D:/Google Drive/Coursera/Assignment 5.1/R/coursera-repdata/project2/figure/', cache=TRUE)
knitr::knit2html("storm.analysis.Rmd", options=c("use_xhtml","smartypants","mathjax","highlight_code", "base64_images"))
hist(runif(1000))
hist(runif(1000))
hist(runif(1000))
hist(runif(1000))
hist(runif(10000))
hist(runif(10000))
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
################################################################################################################################################
rm(list=ls(all=TRUE))
library(ggplot2)
library(knitr)
#######################################################################################################################################################
## In this project you will investigate the exponential distribution in R and compare it with the
## Central Limit Theorem. The exponential distribution can be simulated in R with rexp(n, lambda)
## where lambda is the rate parameter. The mean of exponential distribution is 1/lambda and the
## standard deviation is also 1/lambda. Set lambda = 0.2 for all of the simulations. You will investigate
## the distribution of averages of 40 exponentials. Note that you will need to do a thousand simulations.
## Density, distribution function, quantile function and random generation for the exponential distribution
## with rate rate (i.e., mean 1/rate) ... rexp(n, rate = 1)
##############################################################################################################################################
lambda = 0.2
n = 40
nosim = 1000
set.seed(349)
#############################################################################################################################################
exp_sim <- function(n, lambda)
{
mean(rexp(n,lambda))
}
##########################################################################################################
sim <- data.frame(ncol=2,nrow=1000)
names(sim) <- c("Index","Mean")
for (i in 1:nosim)
{
sim[i,1] <- i
sim[i,2] <- exp_sim(n,lambda)
}
#########################################################################################################
## mean of n = 1000
sample_mean <- mean(sim$Mean)
sample_mean
## Theoretical exponential mean of exponential distribution
theor_mean <- 1/lambda
theor_mean
#########################################################################################################
##
hist(sim$Mean,
breaks=100,
prob=TRUE,
main="Exponential Distribution n = 1000",
xlab="Spread")
abline(v = theor_mean,
col= 3,
lwd = 2)
abline(v = sample_mean,
col = 2,
lwd = 2)
legend('topright', c("Sample Mean", "Theoretical Mean"),
lty=c(1,1),
bty = "n",
col = c(col=3, col=2))
############################################################################################################################################
sample_var <- var(sim$Mean)
theor_var <- ((1/lambda)^2)/40
##############################################################################################################################################
hist(sim$Mean,
breaks = 100,
prob = TRUE,
main ="Exponential Distribution n = 1000",
xlab ="Spread")
xfit <- seq(min(sim$Mean), max(sim$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch=22, col = 3, lwd=2)
legend('topright', c("Theoretical Curve"), lty=1,lwd=2, col=3)
###############################################################################################################################################
hist(sim$Mean,
breaks = 100,
prob = TRUE,
main = "Distribution of Simulated Exponential Distribution", xlab="")
lines(density(sim$Mean))
abline(v = 1/lambda, col = 3)
xfit <- seq(min(sim$Mean), max(sim$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch=22, col="red", lty=2)
legend('topright', c("Simulated Values", "Theoretical Values"), lty=c(1,2), col=c("black", "red"))
###################################################################################################################################################
qqnorm(sim$Mean,
main="Normal Q-Q Plot")
qqline(sim$Mean,
col="3")
####################################################################################################################################################
setwd("/Users/WestYani/Documents/Classes/John\ Hopkins/Data\ Science\ /Statistical\ Inference")
knit2html("project1.rmd", "project1.html")
opts_knit$set(base.dir = 'figure')
#####################################################################################################################################################
setwd("D:/Google Drive/Coursera/Assignment 6.1/codes/StatsInference")
install.packages("pdflatex")
################################################################################################################################################
rm(list=ls(all=TRUE))
library(ggplot2)
library(knitr)
#######################################################################################################################################################
## In this project you will investigate the exponential distribution in R and compare it with the
## Central Limit Theorem. The exponential distribution can be simDataulated in R with rexp(n, lambda)
## where lambda is the rate parameter. The mean of exponential distribution is 1/lambda and the
## standard deviation is also 1/lambda. Set lambda = 0.2 for all of the simDataulations. You will investigate
## the distribution of averages of 40 exponentials. Note that you will need to do a thousand simDataulations.
## Density, distribution function, quantile function and random generation for the exponential distribution
## with rate rate (i.e., mean 1/rate) ... rexp(n, rate = 1)
##############################################################################################################################################
lambda = 0.2
n = 40
nosimData = 1000
set.seed(349)
#############################################################################################################################################
exponen_simDataulation <- function(n, lambda)
{
mean(rexp(n,lambda))
}
##########################################################################################################
simData <- data.frame(ncol=2,nrow=1000)
names(simData) <- c("Index","Mean")
for (i in 1:nosimData)
{
simData[i,1] <- i
simData[i,2] <- exponen_simDataulation(n,lambda)
}
#########################################################################################################
## mean of n = 1000
sample_mean <- mean(simData$Mean)
sample_mean
## Theoretical exponential mean of exponential distribution
theor_mean <- 1/lambda
theor_mean
#########################################################################################################
##
hist(simData$Mean,
breaks=100,
prob=TRUE,
main="Exponential Distribution n = 1000",
xlab="Spread")
abline(v = theor_mean,
col= 3,
lwd = 2)
abline(v = sample_mean,
col = 2,
lwd = 2)
legend('topright', c("Sample Mean", "Theoretical Mean"),
lty=c(1,1),
bty = "n",
col = c(col=3, col=2))
############################################################################################################################################
sample_var <- var(simData$Mean)
theor_var <- ((1/lambda)^2)/40
##############################################################################################################################################
hist(simData$Mean,
breaks = 100,
prob = TRUE,
main ="Exponential Distribution n = 1000",
xlab ="Spread")
xfit <- seq(min(simData$Mean), max(simData$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch=22, col = 3, lwd=2)
legend('topright', c("Theoretical Curve"), lty=1,lwd=2, col=3)
###############################################################################################################################################
hist(simData$Mean,
breaks = 100,
prob = TRUE,
main = "Distribution of Simulated Exponential Distribution", xlab="")
lines(density(simData$Mean))
abline(v = 1/lambda, col = 3)
xfit <- seq(min(simData$Mean), max(simData$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch=22, col="red", lty=2)
legend('topright', c("Simulated Values", "Theoretical Values"), lty=c(1,2), col=c("black", "red"))
###################################################################################################################################################
qqnorm(simData$Mean,
main="Normal Q-Q Plot")
qqline(simData$Mean,
col="3")
####################################################################################################################################################
setwd("/Users/WestYani/Documents/Classes/John\ Hopkins/Data\ Science\ /Statistical\ Inference")
knit2html("project1.rmd", "project1.html")
opts_knit$set(base.dir = 'figure')
#####################################################################################################################################################
rm(list=ls(all=TRUE))
library(ggplot2)
library(knitr)
#######################################################################################################################################################
## In this project you will investigate the exponential distribution in R and compare it with the
## Central Limit Theorem. The exponential distribution can be simulated in R with rexp(n, lambda)
## where lambda is the rate parameter. The mean of exponential distribution is 1/lambda and the
## standard deviation is also 1/lambda. Set lambda = 0.2 for all of the simulations. You will investigate
## the distribution of averages of 40 exponentials. Note that you will need to do a thousand simulations.
## Density, distribution function, quantile function and random generation for the exponential distribution
## with rate rate (i.e., mean 1/rate) ... rexp(n, rate = 1)
##############################################################################################################################################
lambda = 0.2
n = 40
sim = 1000
set.seed(349)
#############################################################################################################################################
exponen_simulation <- function(n, lambda)
{
mean(rexp(n,lambda))
}
##########################################################################################################
simData <- data.frame(ncol=2,nrow=1000)
names(simData) <- c("Index","Mean")
for (i in 1:sim)
{
simData[i,1] <- i
simData[i,2] <- exponen_simulation(n,lambda)
}
#########################################################################################################
## mean of n = 1000
sample_mean <- mean(simData$Mean)
sample_mean
## Theoretical exponential mean of exponential distribution
theoritical_mean <- 1/lambda
theoritical_mean
#########################################################################################################
##
hist(simData$Mean,
breaks=100,
prob=TRUE,
main="Exponential Distribution n = 1000",
xlab="Spread")
abline(v = theoritical_mean,
col= 3,
lwd = 2)
abline(v = sample_mean,
col = 2,
lwd = 2)
legend('topright', c("Sample Mean", "Theoretical Mean"),
lty=c(1,1),
bty = "n",
col = c(col=3, col=2))
############################################################################################################################################
sample_var <- var(simData$Mean)
theor_var <- ((1/lambda)^2)/40
##############################################################################################################################################
hist(simData$Mean,
breaks = 100,
prob = TRUE,
main ="Exponential Distribution n = 1000",
xlab ="Spread")
xfit <- seq(min(simData$Mean), max(simData$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch=22, col = 3, lwd=2)
legend('topright', c("Theoretical Curve"), lty=1,lwd=2, col=3)
###############################################################################################################################################
hist(simData$Mean,
breaks = 100,
prob = TRUE,
main = "Distribution of Simulated Exponential Distribution", xlab="")
lines(density(simData$Mean))
abline(v = 1/lambda, col = 3)
xfit <- seq(min(simData$Mean), max(simData$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch=22, col="red", lty=2)
legend('topright', c("Simulated Values", "Theoretical Values"), lty=c(1,2), col=c("black", "red"))
###################################################################################################################################################
qqnorm(simData$Mean,
main="Normal Q-Q Plot")
qqline(simData$Mean,
col="3")
library(datasets)
data(ToothGrowth)
a <- data(ToothGrowth)
str(ToothGrowth)
View(ToothGrowth)
setwd("D:/Google Drive/Coursera/Assignment 6.1/codes/StatsInference")
setwd("D:/Google Drive/Coursera/Assignment 6.1/codes/StatsInference")
View(ToothGrowth)
View(ToothGrowth)
table(ToothGrowth$supp,ToothGrowth$dose)
table(ToothGrowth)
ojdose0.5 <- ToothGrowth %>% filter(supp=="OJ" & dose=="0.5")
View(ojdose0.5)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w*x)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
library(datasets)
data(mtcars)
mtcars$mpg
yc <- mtcars$mpg - mean(mtcars$mpg)
xc <- mtcars$wt - mean(mtcars$wt)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(mtcars$mpg ~ mtcars$wt))[2])
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(x~1)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(y~x)
est<-predict(fit,data.frame(x))
plot(x,y)
abline(fit,col="red")
summary(fit)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
p1<-predict(fit,data.frame(x), interval="confidence")
plot(x,y,xlab='Weight (1000lb)',ylab='MPG')
abline(fit,col="red")
lines(x,p1[,2],col="purple")
lines(x,p1[,3],col="purple")
predict(fit,data.frame(x=3), interval="prediction")
fit2<-lm(y~I(x/2))
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
summary(fit)$coefficients
fit3<-lm(y~I(x/100))
summary(fit3)$coefficients
c<-5
cf1<-summary(fit)$coefficients
cf1
fit5<-lm(y ~ 1)
fit6<-lm(y ~ x - 1)
plot(x,y)
abline(fit,col="red")
abline(fit5,col="blue")
abline(fit6,col="green")
anova(fit)
anova(fit5)
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Regression Models")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~
| parent,galton)
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
bline(regrline, lwd=3,
| col='red')
bline(regrline, lwd=3,| col='red')
bline(regrline, lwd=3,col='red')
bline(regrline, lwd=3,col='red')
abline(regrline, lwd=3
,
col='red')
summary(regrline)
child ~ parent
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
fit$coef[2]
ols.slope <- fit$coef[2]
#Here are the vectors of variations or tweaks
sltweak <- c(.01, .02, .03, -.01, -.02, -.03) #one for the slope
lhs-rhs
i
all.equal(lhs,rhs)
o
1
varChild <- var(galton$child)
1
varRes <- var(fit$residuals)
1
varEst <- var(est(ols.slope, ols.ic))
1
all.equal(varChild,varEst+varRes)
1
efit <- lm(accel ~ mag+dist, attenu)
1
mean(efit$residuals)
1
cov(efit$residuals, attenu$mag)
4
cov(efit$residuals, attenu$dist)
1
1
1
1
1
cor(gpa_nor,gch_nor)
1
1
1
l_nor <- lm(gch_nor ~ gpa_nor)
1
1
fit <- lm(child ~ parent, galton)
1
sqrt(sum(fit$residuals^2) / (n - 2))
1
summary(fit)$sigma
1
sqrt(deviance(fit)/(n-2))
1
1
mu <- mean(galton$child)
1
1
sTot <- sum((galton$child-mu)^2)
1
1
sRes <- deviance(fit)
1
1
1-sRes/sTot
1
summary(fit)$r.squared
1
cor(galton$parent,galton$child)^2
1
1
2
3
5
4
1
ones <- rep(1, nrow(galton))
1
1
2
1
swirl()
1
swirl()
ones <- rep(1, nrow(galton))
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ . - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ . - 1, trees2)
lapply(list(fit, fit2), coef)
1
2
all <- lm(Fertility ~ ., swiss)
summary(all)
1
1
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
1
cor(swiss$Agriculture,swiss$Education
)
1
makelms()
1
ec <- swiss$Examination+swiss$Catholic
1
efit <- lm(Fertility ~ . + ec, swiss)
1
all$coefficients-efit$coefficients
library(datasets)
data(mtcars)
summary(mtcars)
setwd("D:/Google Drive/Coursera/Assignment 7.1/R/regressionmodel")
